{"ast":null,"code":"// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in the production bundle.\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative' && !self.crypto) {\n    throw new Error('React Native does not have a built-in secure random generator. ' + 'If you don’t need unpredictable IDs, you can use `nanoid/non-secure`. ' + 'For secure IDs, import `react-native-get-random-values` before Nano ID.');\n  }\n\n  if (typeof self !== 'undefined' && self.msCrypto && !self.crypto) {\n    throw new Error('Add self.crypto = self.msCrypto before Nano ID to fix IE 11 support');\n  }\n\n  if (typeof self === 'undefined' || !self.crypto) {\n    throw new Error('Your browser does not have secure random generator. ' + 'If you don’t need unpredictable IDs, you can use nanoid/non-secure.');\n  }\n} // This alphabet uses `A-Za-z0-9_-` symbols. The genetic algorithm helped\n// optimize the gzip compression for this alphabet.\n\n\nlet urlAlphabet = 'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW';\n\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes));\n\nlet customRandom = (alphabet, size, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  // `Math.clz32` is not used, because it is not available in browsers.\n  let mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1; // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n  // `-~f => Math.ceil(f)` if f is a float\n  // `-~i => i + 1` if i is an integer\n\n  let step = -~(1.6 * mask * size / alphabet.length);\n  return () => {\n    let id = '';\n\n    while (true) {\n      let bytes = getRandom(step); // A compact alternative for `for (var i = 0; i < step; i++)`.\n\n      let j = step;\n\n      while (j--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[j] & mask] || ''; // `id.length + 1 === size` is a more compact option.\n\n        if (id.length === +size) return id;\n      }\n    }\n  };\n};\n\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random);\n\nlet nanoid = (size = 21) => {\n  let id = '';\n  let bytes = crypto.getRandomValues(new Uint8Array(size)); // A compact alternative for `for (var i = 0; i < step; i++)`.\n\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    let byte = bytes[size] & 63;\n\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36);\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase();\n    } else if (byte < 63) {\n      id += '_';\n    } else {\n      id += '-';\n    }\n  }\n\n  return id;\n};\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random };","map":{"version":3,"sources":["/Users/chrismills/git/todo-react/node_modules/nanoid/index.browser.js"],"names":["process","env","NODE_ENV","navigator","product","self","crypto","Error","msCrypto","urlAlphabet","random","bytes","getRandomValues","Uint8Array","customRandom","alphabet","size","getRandom","mask","Math","log","length","LN2","step","id","j","customAlphabet","nanoid","byte","toString","toUpperCase"],"mappings":"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","sourcesContent":["// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nif (process.env.NODE_ENV !== 'production') {\n  // All bundlers will remove this block in the production bundle.\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    !self.crypto\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n      'If you don’t need unpredictable IDs, you can use `nanoid/non-secure`. ' +\n      'For secure IDs, import `react-native-get-random-values` before Nano ID.'\n    )\n  }\n  if (typeof self !== 'undefined' && self.msCrypto && !self.crypto) {\n    throw new Error(\n      'Add self.crypto = self.msCrypto before Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof self === 'undefined' || !self.crypto) {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n      'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\n\n// This alphabet uses `A-Za-z0-9_-` symbols. The genetic algorithm helped\n// optimize the gzip compression for this alphabet.\nlet urlAlphabet =\n  'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW'\n\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\n\nlet customRandom = (alphabet, size, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  // `Math.clz32` is not used, because it is not available in browsers.\n  let mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n\n  // `-~f => Math.ceil(f)` if f is a float\n  // `-~i => i + 1` if i is an integer\n  let step = -~(1.6 * mask * size / alphabet.length)\n\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let j = step\n      while (j--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[j] & mask] || ''\n        // `id.length + 1 === size` is a more compact option.\n        if (id.length === +size) return id\n      }\n    }\n  }\n}\n\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\n\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  while (size--) {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"]},"metadata":{},"sourceType":"module"}